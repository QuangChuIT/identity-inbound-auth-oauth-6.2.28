package org.wso2.carbon.identity.sso.authentication.internal;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.eclipse.equinox.http.helper.ContextPathServletAdaptor;import org.osgi.service.component.ComponentContext;import org.osgi.service.component.annotations.*;import org.osgi.service.http.HttpService;import org.wso2.carbon.identity.sso.authentication.SSOAuthenticationConstants;import org.wso2.carbon.identity.sso.authentication.SSOAuthenticationServiceHolder;import org.wso2.carbon.identity.sso.authentication.servlet.SSOAuthenticationCallbackServlet;import org.wso2.carbon.identity.sso.authentication.servlet.SSOAuthenticationServlet;import javax.servlet.Servlet;public class SSOAuthenticationComponent {    private static final Log log = LogFactory.getLog(SSOAuthenticationComponent.class);    protected void activate(ComponentContext ctxt) {        HttpService httpService = SSOAuthenticationServiceHolder.getInstance().getHttpService();        // Register Login Servlet        Servlet ssoAuthenticationServlet = new ContextPathServletAdaptor(new SSOAuthenticationServlet(),                SSOAuthenticationConstants.SSOAuthenticationEndpoints.SSO_LOGIN_ENDPOINT);        try {            httpService.registerServlet(SSOAuthenticationConstants.SSOAuthenticationEndpoints.SSO_LOGIN_ENDPOINT,                    ssoAuthenticationServlet, null, null);        } catch (Exception e) {            String errMsg = "Error when registering Login Servlet via the HttpService.";            log.error(errMsg, e);            throw new RuntimeException(errMsg, e);        }        // Register SSO Callback Servlet        Servlet ssoAuthenticationCallbackServlet = new ContextPathServletAdaptor(new SSOAuthenticationCallbackServlet(),                SSOAuthenticationConstants.SSOAuthenticationEndpoints.SSO_CALLBACK_ENDPOINT);        try {            httpService.registerServlet(SSOAuthenticationConstants.SSOAuthenticationEndpoints.SSO_CALLBACK_ENDPOINT,                    ssoAuthenticationCallbackServlet, null, null);        } catch (Exception e) {            String errMsg = "Error when registering Login Servlet via the HttpService.";            log.error(errMsg, e);            throw new RuntimeException(errMsg, e);        }        log.info("OSGI SERVLET  bundle activated successfully..");    }    protected void deactivate(ComponentContext ctxt) {        if (log.isDebugEnabled()) {            log.debug("OSGI SERVLET  bundle is deactivated ");        }    }    @Reference(            name = "osgi.http.service",            service = HttpService.class,            cardinality = ReferenceCardinality.MANDATORY,            policy = ReferencePolicy.DYNAMIC,            unbind = "unsetHttpService"    )    protected void setHttpService(HttpService httpService) {        SSOAuthenticationServiceHolder.getInstance().setHttpService(httpService);        if (log.isDebugEnabled()) {            log.info("HTTP Service is set in the OSGI SERVLET bundle");        }    }    protected void unsetHttpService(HttpService httpService) {        SSOAuthenticationServiceHolder.getInstance().setHttpService(null);        if (log.isDebugEnabled()) {            log.debug("HTTP Service is unset in the OSGI SERVLET bundle");        }    }}